# -*- coding: utf-8 -*-
"""Wright.Oshane-Course_Registration-ITT103-F2024..ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R9SA_OKQGOc1vQ4PRWbVPpOtdeFMWJ9n

```
Name: Oshane Wright
- ID number: 20245594
- Name of course: Programming Technique(ITT101)
- Name of lecturer: Mr Johnson
- Semester (Fall 2024)
```
"""

#create a class name course with attributes
class Course:
  def __init__(self, course_id, name, fee):
    self.course_id = course_id
    self.name = name
    self.fee = fee

#create a student class with attributes
class student:
  def __init__(self, student_id, name, email):
    self.student_id = student_id
    self.name = name
    self.email = email
    self.course = []
    self.balance = 0.0

  #create method to enroll in a course
  def enroll(self, course):
      if course not in self.course:
        self.course.append(course)
        self.balance += course.fee
        print(f"{self.name} has been enrolled in {course.name}")
      else:
        print(f"{self.name} is already enrolled in {course.name}")

  #create method to get the total fees for enrolled course
  def get_total_fees(self):
      return self.balance

#create registrationsystem class with the attributes of courses and students
class RegistrationSystem:
  def __init__(self):
    self.courses = []
    self.students = {}

#add methods to the registrationsystem class

  #create a method to Add courses to the list
  def add_course(self, course):
    for existing_course in self.courses:
      if existing_course.course_id == course.course_id:
        print(f"Course with ID {course.course_id} already exists")
        return
    self.courses.append(course)
    print(f"Course {course.name} has been added")

  #create a method too add a student to the dictinary
  def register_student(self, student):
    if student.student_id in self.students:
      print(f"Student with ID {student.student_id} already exists")
    else:
      self.students[student.student_id] = student
      print(f"Student {student.name} has been registered")

  #enroll a student in a specific course
  def enroll_in_course(self, student_id, course_id):
        if student_id not in self.students:
            print("Student not found.")
            return
        for course in self.courses:
            if course.course_id == course_id:
                self.students[student_id].enroll(course)
                return
        print("Course not found.")

  #create a method to process payment with the minimum payment being 40% of the balance
  def calculate_payment(self, student_id, amount):
    if student_id not in self.students:
      print("Student not found")
      return
    student = self.students[student_id]
    min_payment = 0.4 * student.get_total_fees()
    if amount >= min_payment:
      student.balance -= amount
      print(f"{student.name} has paid ${amount}")
      print(f"Remaining balance: ${student.balance}")
    else:
        print("Payment needs to be 40%")


  #create a method to display information
  def show_courses(self):
    if not self.courses:
      print("No courses available")
    else:
      print("\nAvailable Courses:")
      for course in self.courses:
        print(f"ID: {course.course_id}, Name: {course.name}, Fee: ${course.fee}")

  #create method to show registered students
  def show_registered_students(self):
    if not self.students:
      print("No students registered")
    else:
      for student in self.students.values():
        print(f"ID: {student.student_id}, Name: {student.name}, email: {student.email}")

  #create a method to show the students that are enrolled in specific course
  def show_students_in_course(self, course_id):
    students_in_course = []
    for student in self.students.values():
      if course_id in [course.course_id for course in student.course]:
        students_in_course.append(student)
        print("\nStudents enrolled in the course:")
        print(f"ID: {student.student_id}, Name: {student.name}, email: {student.email}")
    else:
      print("No students enrolled in the course")

  #check student balance
  def check_balance(self, student_id):
    if student_id not in self.students:
      print("Student not found")
      return
    else:
        student = self.students[student_id]
        balance = student.get_total_fees()
        print(f"{student.name}'s balance is ${balance}")

#create menu for selection
def main():
  registration_system = RegistrationSystem()
  while True:
    print("\nCourse Registration System Menu:")
    print("1. Register Student")
    print("2. Add Course")
    print("3. Show courses")
    print("4. Enroll in Course")
    print("5. Show Registered Students")
    print("6. Show Students in Course")
    print("7. Calculate Payment")
    print("8. Check Balance")
    print("9. Exit")

    try:
      #this prompt make the user to enter a choice
      choice = int(input("Select one of menu options"))

      #register a new student
      if choice == 1:
        student_id = input("Enter student ID: ")
        name = input("Enter student name: ")
        email = input("Enter student email: ")
        new_student = student(student_id, name, email)
        registration_system.register_student(new_student)


      #add new course
      elif choice == 2:
        course_id = input("Enter course ID: ")
        name = input("Enter course name: ")
        fee = float(input("Enter course fee: "))
        course = Course(course_id, name, fee)
        registration_system.add_course(course)


      #show all the available courses
      elif choice == 3:
        registration_system.show_courses()

      #enroll a student in a course
      elif choice == 4:
        student_id = input("Enter student ID: ")
        course_id = input("Enter course ID: ")
        registration_system.enroll_in_course(student_id, course_id)

      #show all the students that are registered
      elif choice == 5:
        print("\nRegistered Students:")
        registration_system.show_registered_students()


      #show the students that register for that specific course
      elif choice == 6:
        course_id = input("Enter course ID: ")
        registration_system.show_students_in_course(course_id)


      #process a payment for the student
      elif choice == 7:
        student_id = input("Enter student ID: ")
        amount = float(input("Enter payment amount: "))
        registration_system.calculate_payment(student_id, amount)
        print("Payment processed successfully")

      #check the balance of the student
      elif choice == 8:
        student_id = input("Enter student ID: ")
        registration_system.check_balance(student_id)
        print("Balance checked successfully")

       #exit/close the entire program
      elif choice == 9:
        print("Exiting the program")
        break
      else:
        print("Invalid choice")

     #to handle any input that is not supported
    except ValueError:
        print("Invalid input, try again")


main()